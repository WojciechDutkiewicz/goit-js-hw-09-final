{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,SAEnCC,EAAS,KACTC,EAAO,KACPC,EAAa,KAgCjB,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAO,CAAEF,WAAUC,SACnBE,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQL,GAERM,EAAON,EAEX,GAAGD,EACL,GACF,CA1CAR,EAAQiB,iBAAiB,UAEzB,SAAoBC,GAClBA,EAAEC,iBAsBFhB,EAASiB,OAAOpB,EAAQqB,OAAOC,OAC/BlB,EAAOgB,OAAOpB,EAAQuB,KAAKD,YAC3BjB,EAAae,OAAOpB,EAAQQ,MAAMc,QAtB9BlB,EAAO,GAAKC,EAAa,GAAKF,GAAU,EAC1CL,EAAA0B,OAAOC,QAAQ,wDAKnB,WACE,IAAK,IAAIC,EAAI,EAAGA,GAAKvB,EAAQuB,GAAK,EAChCpB,EAAcoB,EAAGrB,GACdsB,MAAK,SAAAC,G,IAAGrB,EAAAqB,EAAArB,SAAUC,EAAAoB,EAAApB,MACjBV,EAAA0B,OAAOK,QAAQ,uBAAsCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,MAC7D,IACCuB,OAAM,SAAAH,G,IAAGrB,EAAAqB,EAAArB,SAAUC,EAAAoB,EAAApB,MAClBV,EAAA0B,OAAOC,QAAQ,sBAAqCK,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,MAC5D,IACFH,GAAcD,CAElB,CAdI4B,EAEJ,G","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\n\nlet amount = null;\nlet step = null;\nlet firstDelay = null;\n\nformRef.addEventListener('submit', submitForm);\n\nfunction submitForm(e) {\n  e.preventDefault();\n  gedDataForm();\n  if (step < 0 || firstDelay < 0 || amount <= 0) {\n    Notify.failure('First delay,delay step and amount cannot be negative');\n  } else {\n    createNotify();\n  }\n}\nfunction createNotify() {\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, firstDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    firstDelay += step;\n  }\n}\n\nfunction gedDataForm() {\n  amount = Number(formRef.amount.value);\n  step = Number(formRef.step.value);\n  firstDelay = Number(formRef.delay.value);\n}\n\nfunction createPromise(position, delay) {\n  const data = { position, delay };\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(data);\n      } else {\n        reject(data);\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$firstDelay","$ce04d3a99e08e73b$var$createPromise","position","delay","data","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","Number","amount","value","step","Notify","failure","i","then","param","success","concat","catch","$ce04d3a99e08e73b$var$createNotify"],"version":3,"file":"03-promises.49d2d25d.js.map"}